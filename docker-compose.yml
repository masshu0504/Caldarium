# docker-compose.yml

services:
  # ---------------------------
  # Postgres database
  # ---------------------------
  ls-postgres:
    image: postgres:15
    #container_name: ls-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: labelstudio
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ---------------------------
  # MinIO object storage
  # ---------------------------
  ls-minio:
    image: minio/minio:latest
    container_name: ls-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---------------------------
  # Label Studio
  # ---------------------------
  labelstudio:
    image: heartexlabs/label-studio:latest
    container_name: labelstudio
    environment:
      DATABASE_URL: postgres://postgres:postgres@ls-postgres:5432/labelstudio
      # If you plan to use MinIO as S3, set the following (example):
      # AWS_ACCESS_KEY_ID: minio
      # AWS_SECRET_ACCESS_KEY: minio123
      # AWS_STORAGE_BUCKET_NAME: labelstudio
      # S3_ENDPOINT: http://ls-minio:9000
      # USE_MINIO: "true"
    ports:
      - "8080:8080"
    depends_on:
      ls-postgres:
        condition: service_healthy
      ls-minio:
        condition: service_started
    networks:
      - backend

  # ---------------------------
  # Helper container for bootstrap/export
  # ---------------------------
  helper:
    build:
      context: .
      dockerfile: Dockerfiles/helper.Dockerfile
    container_name: ls-helper
    volumes:
      - .:/workspace
    networks:
      - backend
    tty: true
    depends_on:
      - ls-postgres
      - ls-minio

# ---------------------------
  # FastAPI Parser Service
  # ---------------------------
  parser:
    build:
      context: .
      dockerfile: Dockerfiles/parser.Dockerfile
    volumes:                 # <-- ADDED for fast local development
      - .:/app               # <-- Mounts local code to container's /app directory
    ports:
      - "8002:8000"          # HOST PORT 8002 -> CONTAINER PORT 8000 (Avoids Windows conflict)
    depends_on:
      ls-postgres:
        condition: service_healthy
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: med_parsing
      POSTGRES_HOST: ls-postgres
      POSTGRES_PORT: 5432
    networks:
      - backend

  
  # ---------------------------
  # FastAPI service
  # ---------------------------

  fastapi:
    build:
      context: .
      dockerfile: Dockerfiles/fastapi.Dockerfile
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      ls-postgres:
        condition: service_healthy
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: med_parsing
      POSTGRES_HOST: ls-postgres
      POSTGRES_PORT: 5432
    networks:
      - backend

  # Benchmark runner (Python/Java/Ghostscript)
  # ---------------------------
  bench:
    build:
      context: .
      dockerfile: Dockerfiles/bench.Dockerfile
    volumes:
      - ./:/app               # bind-mount your repo into /app
    working_dir: /app         # run commands from repo root
    networks:
      - backend
    tty: true

  # ---------------------------
  # API service with Great Expectations
  # ---------------------------
  api:
    build:
      context: .
      dockerfile: Dockerfiles/helper.Dockerfile
    container_name: api
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - ./great_expectations:/app/great_expectations
      - ./data:/app/data
    networks:
      - backend
    depends_on:
      - ls-postgres
      - ls-minio

volumes:
  postgres_data:
  minio_data:

networks:
  backend:


 


